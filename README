Compile: make / make all
Run tests: make clean && make TEST=1
Run in qemu: make qemu / make qemu-nox
Debug with gdb: make qemu-gdb / make qemu-nox-gdb
                (in another terminal) gdb

To use your solutions from lab 1: git merge lab1
To use sample lab 1 solutions: copy files in samples/ to appropriate directories

List here the following info:
1. who you have worked with

Flynn Chen (zc264) and Keaton Mueller (kim6)

2. whether you coded this assignment together, and if not, who worked on which part
Yes, we coded on this assignment together.

3. brief description of what you have implemented


0. initialize debugger & debuggee
    Spawn debugger process from idel
    Spawn user process from debugger process
        - sys_debugger_spawn to initialize but not execute the user process
        - tcb_set_debugger(int user_pid, int debugger_pid) register debugger PID in the user process TCB 

1. Read a bunch of addresses to stop at in the debuggee process.
    Invalidate memory addresses provided by debugger
        - store the memory at the original address
        - exchange the memory at the entry with debugging "INT 3" exception with a single byte.

2. Start the debuggee (for example with a start command).
    return control back to the debugee process

3. When a breakpoint is hit, control goes back to the debugger and the user can either type commands to dump 
    the contents of the memory (dump 0x12345678) or resume the execution (continue).
    In TTrapHandler.c, if we get a page fault/memory error, check for the presence of the DEBUG flag
        - if DEBUG is present, find the "debugger" id of the current id, and give it control using
        our thread_yield_to() function in PThread.c

4. Back to 3. 

5. Clean up the break points in that process



Following shows an output of an example run. In the debuggee process, the value "x"
is stored at 0x40004000 in the assembly table, and we show that the value changes
from 5 to 10.

Enter: 
        1. hex or integer to set breakpoint addresses 
        2. 'start' or press enter to start debugee
$> 0x4000027c
added breakpoint at 0x4000027c
$> start
[D] kern/trap/TTrapHandler/TTrapHandler.c:118: Handling breakpoint 0x4000027c
$> c
Hello, [D] kern/trap/TTrapHandler/TTrapHandler.c:118: Handling breakpoint 0x4000027c
$> c
Hello, [D] kern/trap/TTrapHandler/TTrapHandler.c:118: Handling breakpoint 0x4000027c
$> c
Hello, [D] kern/trap/TTrapHandler/TTrapHandler.c:118: Handling breakpoint 0x4000027c
$> c
Hello, [D] kern/trap/TTrapHandler/TTrapHandler.c:118: Handling breakpoint 0x4000027c
$> c
world!
[D] kern/trap/TTrapHandler/TTrapHandler.c:118: Handling breakpoint 0x4000027c
$> d 0x40004000 4
read 4 bytes at 0x40004000: 5
$> c
x = 5
[D] kern/trap/TTrapHandler/TTrapHandler.c:118: Handling breakpoint 0x4000027c
$> d 0x40004000 4
read 4 bytes at 0x40004000: 10
$> 



4. and anything else you would like us to know
NA
