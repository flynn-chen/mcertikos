Compile: make / make all
Run tests: make clean && make TEST=1
Run in qemu: make qemu / make qemu-nox
Debug with gdb: make qemu-gdb / make qemu-nox-gdb
                (in another terminal) gdb

Names:
Flynn Chen (zc264) + Keaton Mueller (kim6)


Questions:
1. At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?
The processor enters 32-bit at line 107 of boot1.S (movl %eax, %cr0) where the protected mode enable flag is flipped and moved into the registers. 

2. What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?
The last instruction of the boot loader is line 10 in exec_kernel.S where it jumps to the instruction held in the address in %edx.
The first instruction of the kernel is "cli", clear interrupt flags in line 21 of kern/init/entry.S.

3. Where is the first instruction of the kernel?
In line 21 of kern/init/entry.S.

4. How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?
The bootloader decides the information from the ELF header stored in memory in location 0x464C457FU, as declared in line 128 of boot/boot1/boot1lib.h.

5. (From MATOp.c) Do you have to scan the allocation table from index 0? Recall how you have initialized the table in pmem_init.
No, we declared a variable to keep track of the last free allocation table page so that retrieval is faster.

Descriptions:

We implemented Physical Memory Management by implementing the functions in according to the specifications.

MATIntro
- Wrote code to access/change the entries in AT.

MATInit
- Initialized the permission for each page by scanning the physical memory table.

MATOp
- Keep track of free memory and allow allocation and free by changing the page status. 