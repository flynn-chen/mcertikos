Compile: make / make all
Run tests: make clean && make TEST=1
Run in qemu: make qemu / make qemu-nox
Debug with gdb: make qemu-gdb / make qemu-nox-gdb
                (in another terminal) gdb

Names:
Flynn Chen (zc264) + Keaton Mueller (kim6)


Questions:
1. At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?

2. What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?

3. Where is the first instruction of the kernel?

4. How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?

5. (From MATOp.c) Do you have to scan the allocation table from index 0? Recall how you have initialized the table in pmem_init.


Descriptions: